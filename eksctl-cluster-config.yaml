# This eksctl configuration file represents the cluster
# ref:      https://eksctl.io/usage/schema/
# ref:      https://eksctl.io/usage/security/
#
# create:   eksctl create cluster --config-file eksctl-cluster-config.yaml --set-kubeconfig-context
# upgrade:  eksctl upgrade cluster --config-file eksctl-cluster-config.yaml
# delete:   eksctl delete cluster --config-file eksctl-cluster-config.yaml
#
# Attribution: this was based on @yuvipanda's work in 2i2c! <3
# ref: https://github.com/2i2c-org/pangeo-hubs/blob/8e552bc198d8339efe8c003cb847849255e8f8ed/aws/eksctl-config.yaml
#
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: l2l
  # region was chosen to to us-west-2 (Oregon) over us-east-2 (Ohio) which was
  # another reasonable option for the sake of data locality, see what to
  # consider in this great guide: https://www.concurrencylabs.com/blog/choose-your-aws-region-wisely/
  region: us-west-2
  version: "1.18"

# availabilityZones: for the EKS control plane, arbitrary chosen but made
# explicit to ensure we can locate the node pool on an AZ where the EKS control
# plane exist as required.
availabilityZones: [us-west-2d, us-west-2b, us-west-2a]

iam:
  withOIDC: true        # https://eksctl.io/usage/security/#withoidc
  disablePodIMDS: true  # https://eksctl.io/usage/security/#disablepodimds

# When choosing machine type, consider:
# - Maximum pods: https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt
# - Node specs:   https://aws.amazon.com/ec2/instance-types/
#
# With managedNodeGroups, you can upgrade a node group like this:
#
#   eksctl upgrade nodegroup --config-file eksctl-cluster-config.yaml
#
# With nodeGroups, you can have a minSize of 0 which managedNodeGroups doesn't
# support yet: https://github.com/aws/containers-roadmap/issues/724
# 
managedNodeGroups:
  # Core node group to hold non-user content
  - name: core
    instanceType: m5.large   # 28 pods, 2 cpu, 8 GB
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    volumeSize: 80
    labels:
      hub.jupyter.org/node-purpose: core
    # tags: we need to help the cluster autoscaler a bit to know what labels the
    #       nodes created from a node group will get, besides knowing if a k8s
    #       cluster can use a node group.
    # ref: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md#auto-discovery-setup
    tags:
      # automaticly added by eksctl: k8s.io/cluster-autoscaler/<cluster-name>
      # automaticly added by eksctl: k8s.io/cluster-autoscaler/enabled
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: core
    # availabilityZones: aws ec2 describe-availability-zones --region <region-name>
    availabilityZones: [us-west-2d]
    iam:
      withAddonPolicies:
        # autoscaler: enables IAM policy for cluster-autoscaler
        autoScaler: true
